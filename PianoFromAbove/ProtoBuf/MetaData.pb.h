// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MetaData.proto

#ifndef PROTOBUF_MetaData_2eproto__INCLUDED
#define PROTOBUF_MetaData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace PFAData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MetaData_2eproto();
void protobuf_AssignDesc_MetaData_2eproto();
void protobuf_ShutdownFile_MetaData_2eproto();

class Label;
class Score;
class SongInfo;
class FileInfo;
class File;
class MetaData;
class Registration;

// ===================================================================

class Label : public ::google::protobuf::MessageLite {
 public:
  Label();
  virtual ~Label();

  Label(const Label& from);

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }

  static const Label& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Label* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Label* other);

  // implements Message ----------------------------------------------

  Label* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // required string label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:PFAData.Label)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_label();
  inline void clear_has_label();

  ::std::string* label_;
  ::google::protobuf::int32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MetaData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MetaData_2eproto();
  #endif
  friend void protobuf_AssignDesc_MetaData_2eproto();
  friend void protobuf_ShutdownFile_MetaData_2eproto();

  void InitAsDefaultInstance();
  static Label* default_instance_;
};
// -------------------------------------------------------------------

class Score : public ::google::protobuf::MessageLite {
 public:
  Score();
  virtual ~Score();

  Score(const Score& from);

  inline Score& operator=(const Score& from) {
    CopyFrom(from);
    return *this;
  }

  static const Score& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Score* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Score* other);

  // implements Message ----------------------------------------------

  Score* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Score& from);
  void MergeFrom(const Score& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 mult = 2 [default = 10];
  inline bool has_mult() const;
  inline void clear_mult();
  static const int kMultFieldNumber = 2;
  inline ::google::protobuf::int32 mult() const;
  inline void set_mult(::google::protobuf::int32 value);

  // optional int32 missed = 3;
  inline bool has_missed() const;
  inline void clear_missed();
  static const int kMissedFieldNumber = 3;
  inline ::google::protobuf::int32 missed() const;
  inline void set_missed(::google::protobuf::int32 value);

  // optional int32 incorrect = 4;
  inline bool has_incorrect() const;
  inline void clear_incorrect();
  static const int kIncorrectFieldNumber = 4;
  inline ::google::protobuf::int32 incorrect() const;
  inline void set_incorrect(::google::protobuf::int32 value);

  // optional int32 ok = 5;
  inline bool has_ok() const;
  inline void clear_ok();
  static const int kOkFieldNumber = 5;
  inline ::google::protobuf::int32 ok() const;
  inline void set_ok(::google::protobuf::int32 value);

  // optional int32 good = 6;
  inline bool has_good() const;
  inline void clear_good();
  static const int kGoodFieldNumber = 6;
  inline ::google::protobuf::int32 good() const;
  inline void set_good(::google::protobuf::int32 value);

  // optional int32 great = 7;
  inline bool has_great() const;
  inline void clear_great();
  static const int kGreatFieldNumber = 7;
  inline ::google::protobuf::int32 great() const;
  inline void set_great(::google::protobuf::int32 value);

  // optional sint32 curStreak = 8;
  inline bool has_curstreak() const;
  inline void clear_curstreak();
  static const int kCurStreakFieldNumber = 8;
  inline ::google::protobuf::int32 curstreak() const;
  inline void set_curstreak(::google::protobuf::int32 value);

  // optional int32 goodStreak = 9;
  inline bool has_goodstreak() const;
  inline void clear_goodstreak();
  static const int kGoodStreakFieldNumber = 9;
  inline ::google::protobuf::int32 goodstreak() const;
  inline void set_goodstreak(::google::protobuf::int32 value);

  // optional int32 badStreak = 10;
  inline bool has_badstreak() const;
  inline void clear_badstreak();
  static const int kBadStreakFieldNumber = 10;
  inline ::google::protobuf::int32 badstreak() const;
  inline void set_badstreak(::google::protobuf::int32 value);

  // optional int32 date = 11;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 11;
  inline ::google::protobuf::int32 date() const;
  inline void set_date(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PFAData.Score)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_mult();
  inline void clear_has_mult();
  inline void set_has_missed();
  inline void clear_has_missed();
  inline void set_has_incorrect();
  inline void clear_has_incorrect();
  inline void set_has_ok();
  inline void clear_has_ok();
  inline void set_has_good();
  inline void clear_has_good();
  inline void set_has_great();
  inline void clear_has_great();
  inline void set_has_curstreak();
  inline void clear_has_curstreak();
  inline void set_has_goodstreak();
  inline void clear_has_goodstreak();
  inline void set_has_badstreak();
  inline void clear_has_badstreak();
  inline void set_has_date();
  inline void clear_has_date();

  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 mult_;
  ::google::protobuf::int32 missed_;
  ::google::protobuf::int32 incorrect_;
  ::google::protobuf::int32 ok_;
  ::google::protobuf::int32 good_;
  ::google::protobuf::int32 great_;
  ::google::protobuf::int32 curstreak_;
  ::google::protobuf::int32 goodstreak_;
  ::google::protobuf::int32 badstreak_;
  ::google::protobuf::int32 date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MetaData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MetaData_2eproto();
  #endif
  friend void protobuf_AssignDesc_MetaData_2eproto();
  friend void protobuf_ShutdownFile_MetaData_2eproto();

  void InitAsDefaultInstance();
  static Score* default_instance_;
};
// -------------------------------------------------------------------

class SongInfo : public ::google::protobuf::MessageLite {
 public:
  SongInfo();
  virtual ~SongInfo();

  SongInfo(const SongInfo& from);

  inline SongInfo& operator=(const SongInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SongInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SongInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SongInfo* other);

  // implements Message ----------------------------------------------

  SongInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SongInfo& from);
  void MergeFrom(const SongInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes md5 = 1;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 1;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const void* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // optional int32 division = 2;
  inline bool has_division() const;
  inline void clear_division();
  static const int kDivisionFieldNumber = 2;
  inline ::google::protobuf::int32 division() const;
  inline void set_division(::google::protobuf::int32 value);

  // optional int32 notes = 3;
  inline bool has_notes() const;
  inline void clear_notes();
  static const int kNotesFieldNumber = 3;
  inline ::google::protobuf::int32 notes() const;
  inline void set_notes(::google::protobuf::int32 value);

  // optional int32 beats = 4;
  inline bool has_beats() const;
  inline void clear_beats();
  static const int kBeatsFieldNumber = 4;
  inline ::google::protobuf::int32 beats() const;
  inline void set_beats(::google::protobuf::int32 value);

  // optional int32 seconds = 5;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 5;
  inline ::google::protobuf::int32 seconds() const;
  inline void set_seconds(::google::protobuf::int32 value);

  // optional int32 tracks = 6;
  inline bool has_tracks() const;
  inline void clear_tracks();
  static const int kTracksFieldNumber = 6;
  inline ::google::protobuf::int32 tracks() const;
  inline void set_tracks(::google::protobuf::int32 value);

  // optional int32 plays = 7;
  inline bool has_plays() const;
  inline void clear_plays();
  static const int kPlaysFieldNumber = 7;
  inline ::google::protobuf::int32 plays() const;
  inline void set_plays(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PFAData.SongInfo)
 private:
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_division();
  inline void clear_has_division();
  inline void set_has_notes();
  inline void clear_has_notes();
  inline void set_has_beats();
  inline void clear_has_beats();
  inline void set_has_seconds();
  inline void clear_has_seconds();
  inline void set_has_tracks();
  inline void clear_has_tracks();
  inline void set_has_plays();
  inline void clear_has_plays();

  ::std::string* md5_;
  ::google::protobuf::int32 division_;
  ::google::protobuf::int32 notes_;
  ::google::protobuf::int32 beats_;
  ::google::protobuf::int32 seconds_;
  ::google::protobuf::int32 tracks_;
  ::google::protobuf::int32 plays_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MetaData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MetaData_2eproto();
  #endif
  friend void protobuf_AssignDesc_MetaData_2eproto();
  friend void protobuf_ShutdownFile_MetaData_2eproto();

  void InitAsDefaultInstance();
  static SongInfo* default_instance_;
};
// -------------------------------------------------------------------

class FileInfo : public ::google::protobuf::MessageLite {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const FileInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FileInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FileInfo* other);

  // implements Message ----------------------------------------------

  FileInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PFAData.SongInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PFAData::SongInfo& info() const;
  inline ::PFAData::SongInfo* mutable_info();
  inline ::PFAData::SongInfo* release_info();
  inline void set_allocated_info(::PFAData::SongInfo* info);

  // repeated .PFAData.Label label = 2;
  inline int label_size() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::PFAData::Label& label(int index) const;
  inline ::PFAData::Label* mutable_label(int index);
  inline ::PFAData::Label* add_label();
  inline const ::google::protobuf::RepeatedPtrField< ::PFAData::Label >&
      label() const;
  inline ::google::protobuf::RepeatedPtrField< ::PFAData::Label >*
      mutable_label();

  // repeated .PFAData.Score top10 = 3;
  inline int top10_size() const;
  inline void clear_top10();
  static const int kTop10FieldNumber = 3;
  inline const ::PFAData::Score& top10(int index) const;
  inline ::PFAData::Score* mutable_top10(int index);
  inline ::PFAData::Score* add_top10();
  inline const ::google::protobuf::RepeatedPtrField< ::PFAData::Score >&
      top10() const;
  inline ::google::protobuf::RepeatedPtrField< ::PFAData::Score >*
      mutable_top10();

  // @@protoc_insertion_point(class_scope:PFAData.FileInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::PFAData::SongInfo* info_;
  ::google::protobuf::RepeatedPtrField< ::PFAData::Label > label_;
  ::google::protobuf::RepeatedPtrField< ::PFAData::Score > top10_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MetaData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MetaData_2eproto();
  #endif
  friend void protobuf_AssignDesc_MetaData_2eproto();
  friend void protobuf_ShutdownFile_MetaData_2eproto();

  void InitAsDefaultInstance();
  static FileInfo* default_instance_;
};
// -------------------------------------------------------------------

class File : public ::google::protobuf::MessageLite {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }

  static const File& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const File* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(File* other);

  // implements Message ----------------------------------------------

  File* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fileName = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required int32 fileSize = 2;
  inline bool has_filesize() const;
  inline void clear_filesize();
  static const int kFileSizeFieldNumber = 2;
  inline ::google::protobuf::int32 filesize() const;
  inline void set_filesize(::google::protobuf::int32 value);

  // required int32 infoPos = 3;
  inline bool has_infopos() const;
  inline void clear_infopos();
  static const int kInfoPosFieldNumber = 3;
  inline ::google::protobuf::int32 infopos() const;
  inline void set_infopos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PFAData.File)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_filesize();
  inline void clear_has_filesize();
  inline void set_has_infopos();
  inline void clear_has_infopos();

  ::std::string* filename_;
  ::google::protobuf::int32 filesize_;
  ::google::protobuf::int32 infopos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MetaData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MetaData_2eproto();
  #endif
  friend void protobuf_AssignDesc_MetaData_2eproto();
  friend void protobuf_ShutdownFile_MetaData_2eproto();

  void InitAsDefaultInstance();
  static File* default_instance_;
};
// -------------------------------------------------------------------

class MetaData : public ::google::protobuf::MessageLite {
 public:
  MetaData();
  virtual ~MetaData();

  MetaData(const MetaData& from);

  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }

  static const MetaData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MetaData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MetaData* other);

  // implements Message ----------------------------------------------

  MetaData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PFAData.File file = 1;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::PFAData::File& file(int index) const;
  inline ::PFAData::File* mutable_file(int index);
  inline ::PFAData::File* add_file();
  inline const ::google::protobuf::RepeatedPtrField< ::PFAData::File >&
      file() const;
  inline ::google::protobuf::RepeatedPtrField< ::PFAData::File >*
      mutable_file();

  // repeated .PFAData.FileInfo fileInfo = 2;
  inline int fileinfo_size() const;
  inline void clear_fileinfo();
  static const int kFileInfoFieldNumber = 2;
  inline const ::PFAData::FileInfo& fileinfo(int index) const;
  inline ::PFAData::FileInfo* mutable_fileinfo(int index);
  inline ::PFAData::FileInfo* add_fileinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PFAData::FileInfo >&
      fileinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PFAData::FileInfo >*
      mutable_fileinfo();

  // @@protoc_insertion_point(class_scope:PFAData.MetaData)
 private:

  ::google::protobuf::RepeatedPtrField< ::PFAData::File > file_;
  ::google::protobuf::RepeatedPtrField< ::PFAData::FileInfo > fileinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MetaData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MetaData_2eproto();
  #endif
  friend void protobuf_AssignDesc_MetaData_2eproto();
  friend void protobuf_ShutdownFile_MetaData_2eproto();

  void InitAsDefaultInstance();
  static MetaData* default_instance_;
};
// -------------------------------------------------------------------

class Registration : public ::google::protobuf::MessageLite {
 public:
  Registration();
  virtual ~Registration();

  Registration(const Registration& from);

  inline Registration& operator=(const Registration& from) {
    CopyFrom(from);
    return *this;
  }

  static const Registration& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Registration* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Registration* other);

  // implements Message ----------------------------------------------

  Registration* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Registration& from);
  void MergeFrom(const Registration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string displayname = 1;
  inline bool has_displayname() const;
  inline void clear_displayname();
  static const int kDisplaynameFieldNumber = 1;
  inline const ::std::string& displayname() const;
  inline void set_displayname(const ::std::string& value);
  inline void set_displayname(const char* value);
  inline void set_displayname(const char* value, size_t size);
  inline ::std::string* mutable_displayname();
  inline ::std::string* release_displayname();
  inline void set_allocated_displayname(::std::string* displayname);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional int32 date = 4;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 4;
  inline ::google::protobuf::int32 date() const;
  inline void set_date(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PFAData.Registration)
 private:
  inline void set_has_displayname();
  inline void clear_has_displayname();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_date();
  inline void clear_has_date();

  ::std::string* displayname_;
  ::std::string* name_;
  ::std::string* key_;
  ::google::protobuf::int32 date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MetaData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MetaData_2eproto();
  #endif
  friend void protobuf_AssignDesc_MetaData_2eproto();
  friend void protobuf_ShutdownFile_MetaData_2eproto();

  void InitAsDefaultInstance();
  static Registration* default_instance_;
};
// ===================================================================


// ===================================================================

// Label

// required int32 pos = 1;
inline bool Label::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Label::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Label::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Label::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 Label::pos() const {
  return pos_;
}
inline void Label::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// required string label = 2;
inline bool Label::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Label::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Label::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Label::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& Label::label() const {
  return *label_;
}
inline void Label::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Label::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Label::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Label::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* Label::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Label::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Score

// required sint32 score = 1;
inline bool Score::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Score::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Score::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Score::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Score::score() const {
  return score_;
}
inline void Score::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 mult = 2 [default = 10];
inline bool Score::has_mult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Score::set_has_mult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Score::clear_has_mult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Score::clear_mult() {
  mult_ = 10;
  clear_has_mult();
}
inline ::google::protobuf::int32 Score::mult() const {
  return mult_;
}
inline void Score::set_mult(::google::protobuf::int32 value) {
  set_has_mult();
  mult_ = value;
}

// optional int32 missed = 3;
inline bool Score::has_missed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Score::set_has_missed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Score::clear_has_missed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Score::clear_missed() {
  missed_ = 0;
  clear_has_missed();
}
inline ::google::protobuf::int32 Score::missed() const {
  return missed_;
}
inline void Score::set_missed(::google::protobuf::int32 value) {
  set_has_missed();
  missed_ = value;
}

// optional int32 incorrect = 4;
inline bool Score::has_incorrect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Score::set_has_incorrect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Score::clear_has_incorrect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Score::clear_incorrect() {
  incorrect_ = 0;
  clear_has_incorrect();
}
inline ::google::protobuf::int32 Score::incorrect() const {
  return incorrect_;
}
inline void Score::set_incorrect(::google::protobuf::int32 value) {
  set_has_incorrect();
  incorrect_ = value;
}

// optional int32 ok = 5;
inline bool Score::has_ok() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Score::set_has_ok() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Score::clear_has_ok() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Score::clear_ok() {
  ok_ = 0;
  clear_has_ok();
}
inline ::google::protobuf::int32 Score::ok() const {
  return ok_;
}
inline void Score::set_ok(::google::protobuf::int32 value) {
  set_has_ok();
  ok_ = value;
}

// optional int32 good = 6;
inline bool Score::has_good() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Score::set_has_good() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Score::clear_has_good() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Score::clear_good() {
  good_ = 0;
  clear_has_good();
}
inline ::google::protobuf::int32 Score::good() const {
  return good_;
}
inline void Score::set_good(::google::protobuf::int32 value) {
  set_has_good();
  good_ = value;
}

// optional int32 great = 7;
inline bool Score::has_great() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Score::set_has_great() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Score::clear_has_great() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Score::clear_great() {
  great_ = 0;
  clear_has_great();
}
inline ::google::protobuf::int32 Score::great() const {
  return great_;
}
inline void Score::set_great(::google::protobuf::int32 value) {
  set_has_great();
  great_ = value;
}

// optional sint32 curStreak = 8;
inline bool Score::has_curstreak() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Score::set_has_curstreak() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Score::clear_has_curstreak() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Score::clear_curstreak() {
  curstreak_ = 0;
  clear_has_curstreak();
}
inline ::google::protobuf::int32 Score::curstreak() const {
  return curstreak_;
}
inline void Score::set_curstreak(::google::protobuf::int32 value) {
  set_has_curstreak();
  curstreak_ = value;
}

// optional int32 goodStreak = 9;
inline bool Score::has_goodstreak() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Score::set_has_goodstreak() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Score::clear_has_goodstreak() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Score::clear_goodstreak() {
  goodstreak_ = 0;
  clear_has_goodstreak();
}
inline ::google::protobuf::int32 Score::goodstreak() const {
  return goodstreak_;
}
inline void Score::set_goodstreak(::google::protobuf::int32 value) {
  set_has_goodstreak();
  goodstreak_ = value;
}

// optional int32 badStreak = 10;
inline bool Score::has_badstreak() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Score::set_has_badstreak() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Score::clear_has_badstreak() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Score::clear_badstreak() {
  badstreak_ = 0;
  clear_has_badstreak();
}
inline ::google::protobuf::int32 Score::badstreak() const {
  return badstreak_;
}
inline void Score::set_badstreak(::google::protobuf::int32 value) {
  set_has_badstreak();
  badstreak_ = value;
}

// optional int32 date = 11;
inline bool Score::has_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Score::set_has_date() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Score::clear_has_date() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Score::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline ::google::protobuf::int32 Score::date() const {
  return date_;
}
inline void Score::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
}

// -------------------------------------------------------------------

// SongInfo

// required bytes md5 = 1;
inline bool SongInfo::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SongInfo::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SongInfo::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SongInfo::clear_md5() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& SongInfo::md5() const {
  return *md5_;
}
inline void SongInfo::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void SongInfo::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void SongInfo::set_md5(const void* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SongInfo::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  return md5_;
}
inline ::std::string* SongInfo::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SongInfo::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 division = 2;
inline bool SongInfo::has_division() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SongInfo::set_has_division() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SongInfo::clear_has_division() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SongInfo::clear_division() {
  division_ = 0;
  clear_has_division();
}
inline ::google::protobuf::int32 SongInfo::division() const {
  return division_;
}
inline void SongInfo::set_division(::google::protobuf::int32 value) {
  set_has_division();
  division_ = value;
}

// optional int32 notes = 3;
inline bool SongInfo::has_notes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SongInfo::set_has_notes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SongInfo::clear_has_notes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SongInfo::clear_notes() {
  notes_ = 0;
  clear_has_notes();
}
inline ::google::protobuf::int32 SongInfo::notes() const {
  return notes_;
}
inline void SongInfo::set_notes(::google::protobuf::int32 value) {
  set_has_notes();
  notes_ = value;
}

// optional int32 beats = 4;
inline bool SongInfo::has_beats() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SongInfo::set_has_beats() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SongInfo::clear_has_beats() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SongInfo::clear_beats() {
  beats_ = 0;
  clear_has_beats();
}
inline ::google::protobuf::int32 SongInfo::beats() const {
  return beats_;
}
inline void SongInfo::set_beats(::google::protobuf::int32 value) {
  set_has_beats();
  beats_ = value;
}

// optional int32 seconds = 5;
inline bool SongInfo::has_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SongInfo::set_has_seconds() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SongInfo::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SongInfo::clear_seconds() {
  seconds_ = 0;
  clear_has_seconds();
}
inline ::google::protobuf::int32 SongInfo::seconds() const {
  return seconds_;
}
inline void SongInfo::set_seconds(::google::protobuf::int32 value) {
  set_has_seconds();
  seconds_ = value;
}

// optional int32 tracks = 6;
inline bool SongInfo::has_tracks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SongInfo::set_has_tracks() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SongInfo::clear_has_tracks() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SongInfo::clear_tracks() {
  tracks_ = 0;
  clear_has_tracks();
}
inline ::google::protobuf::int32 SongInfo::tracks() const {
  return tracks_;
}
inline void SongInfo::set_tracks(::google::protobuf::int32 value) {
  set_has_tracks();
  tracks_ = value;
}

// optional int32 plays = 7;
inline bool SongInfo::has_plays() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SongInfo::set_has_plays() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SongInfo::clear_has_plays() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SongInfo::clear_plays() {
  plays_ = 0;
  clear_has_plays();
}
inline ::google::protobuf::int32 SongInfo::plays() const {
  return plays_;
}
inline void SongInfo::set_plays(::google::protobuf::int32 value) {
  set_has_plays();
  plays_ = value;
}

// -------------------------------------------------------------------

// FileInfo

// required .PFAData.SongInfo info = 1;
inline bool FileInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileInfo::clear_info() {
  if (info_ != NULL) info_->::PFAData::SongInfo::Clear();
  clear_has_info();
}
inline const ::PFAData::SongInfo& FileInfo::info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::PFAData::SongInfo* FileInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PFAData::SongInfo;
  return info_;
}
inline ::PFAData::SongInfo* FileInfo::release_info() {
  clear_has_info();
  ::PFAData::SongInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void FileInfo::set_allocated_info(::PFAData::SongInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// repeated .PFAData.Label label = 2;
inline int FileInfo::label_size() const {
  return label_.size();
}
inline void FileInfo::clear_label() {
  label_.Clear();
}
inline const ::PFAData::Label& FileInfo::label(int index) const {
  return label_.Get(index);
}
inline ::PFAData::Label* FileInfo::mutable_label(int index) {
  return label_.Mutable(index);
}
inline ::PFAData::Label* FileInfo::add_label() {
  return label_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PFAData::Label >&
FileInfo::label() const {
  return label_;
}
inline ::google::protobuf::RepeatedPtrField< ::PFAData::Label >*
FileInfo::mutable_label() {
  return &label_;
}

// repeated .PFAData.Score top10 = 3;
inline int FileInfo::top10_size() const {
  return top10_.size();
}
inline void FileInfo::clear_top10() {
  top10_.Clear();
}
inline const ::PFAData::Score& FileInfo::top10(int index) const {
  return top10_.Get(index);
}
inline ::PFAData::Score* FileInfo::mutable_top10(int index) {
  return top10_.Mutable(index);
}
inline ::PFAData::Score* FileInfo::add_top10() {
  return top10_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PFAData::Score >&
FileInfo::top10() const {
  return top10_;
}
inline ::google::protobuf::RepeatedPtrField< ::PFAData::Score >*
FileInfo::mutable_top10() {
  return &top10_;
}

// -------------------------------------------------------------------

// File

// required string fileName = 1;
inline bool File::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void File::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void File::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void File::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& File::filename() const {
  return *filename_;
}
inline void File::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void File::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void File::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* File::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* File::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void File::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 fileSize = 2;
inline bool File::has_filesize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void File::set_has_filesize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void File::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void File::clear_filesize() {
  filesize_ = 0;
  clear_has_filesize();
}
inline ::google::protobuf::int32 File::filesize() const {
  return filesize_;
}
inline void File::set_filesize(::google::protobuf::int32 value) {
  set_has_filesize();
  filesize_ = value;
}

// required int32 infoPos = 3;
inline bool File::has_infopos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void File::set_has_infopos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void File::clear_has_infopos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void File::clear_infopos() {
  infopos_ = 0;
  clear_has_infopos();
}
inline ::google::protobuf::int32 File::infopos() const {
  return infopos_;
}
inline void File::set_infopos(::google::protobuf::int32 value) {
  set_has_infopos();
  infopos_ = value;
}

// -------------------------------------------------------------------

// MetaData

// repeated .PFAData.File file = 1;
inline int MetaData::file_size() const {
  return file_.size();
}
inline void MetaData::clear_file() {
  file_.Clear();
}
inline const ::PFAData::File& MetaData::file(int index) const {
  return file_.Get(index);
}
inline ::PFAData::File* MetaData::mutable_file(int index) {
  return file_.Mutable(index);
}
inline ::PFAData::File* MetaData::add_file() {
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PFAData::File >&
MetaData::file() const {
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::PFAData::File >*
MetaData::mutable_file() {
  return &file_;
}

// repeated .PFAData.FileInfo fileInfo = 2;
inline int MetaData::fileinfo_size() const {
  return fileinfo_.size();
}
inline void MetaData::clear_fileinfo() {
  fileinfo_.Clear();
}
inline const ::PFAData::FileInfo& MetaData::fileinfo(int index) const {
  return fileinfo_.Get(index);
}
inline ::PFAData::FileInfo* MetaData::mutable_fileinfo(int index) {
  return fileinfo_.Mutable(index);
}
inline ::PFAData::FileInfo* MetaData::add_fileinfo() {
  return fileinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PFAData::FileInfo >&
MetaData::fileinfo() const {
  return fileinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PFAData::FileInfo >*
MetaData::mutable_fileinfo() {
  return &fileinfo_;
}

// -------------------------------------------------------------------

// Registration

// optional string displayname = 1;
inline bool Registration::has_displayname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Registration::set_has_displayname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Registration::clear_has_displayname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Registration::clear_displayname() {
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    displayname_->clear();
  }
  clear_has_displayname();
}
inline const ::std::string& Registration::displayname() const {
  return *displayname_;
}
inline void Registration::set_displayname(const ::std::string& value) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
}
inline void Registration::set_displayname(const char* value) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
}
inline void Registration::set_displayname(const char* value, size_t size) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Registration::mutable_displayname() {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    displayname_ = new ::std::string;
  }
  return displayname_;
}
inline ::std::string* Registration::release_displayname() {
  clear_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = displayname_;
    displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Registration::set_allocated_displayname(::std::string* displayname) {
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (displayname) {
    set_has_displayname();
    displayname_ = displayname;
  } else {
    clear_has_displayname();
    displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool Registration::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Registration::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Registration::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Registration::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Registration::name() const {
  return *name_;
}
inline void Registration::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Registration::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Registration::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Registration::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Registration::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Registration::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes key = 3;
inline bool Registration::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Registration::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Registration::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Registration::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Registration::key() const {
  return *key_;
}
inline void Registration::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Registration::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Registration::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Registration::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Registration::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Registration::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 date = 4;
inline bool Registration::has_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Registration::set_has_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Registration::clear_has_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Registration::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline ::google::protobuf::int32 Registration::date() const {
  return date_;
}
inline void Registration::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PFAData

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MetaData_2eproto__INCLUDED
