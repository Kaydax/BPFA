// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MetaData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MetaData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace PFAData {

void protobuf_ShutdownFile_MetaData_2eproto() {
  delete Label::default_instance_;
  delete Score::default_instance_;
  delete SongInfo::default_instance_;
  delete FileInfo::default_instance_;
  delete File::default_instance_;
  delete MetaData::default_instance_;
  delete Registration::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MetaData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MetaData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Label::default_instance_ = new Label();
  Score::default_instance_ = new Score();
  SongInfo::default_instance_ = new SongInfo();
  FileInfo::default_instance_ = new FileInfo();
  File::default_instance_ = new File();
  MetaData::default_instance_ = new MetaData();
  Registration::default_instance_ = new Registration();
  Label::default_instance_->InitAsDefaultInstance();
  Score::default_instance_->InitAsDefaultInstance();
  SongInfo::default_instance_->InitAsDefaultInstance();
  FileInfo::default_instance_->InitAsDefaultInstance();
  File::default_instance_->InitAsDefaultInstance();
  MetaData::default_instance_->InitAsDefaultInstance();
  Registration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MetaData_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MetaData_2eproto_once_);
void protobuf_AddDesc_MetaData_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MetaData_2eproto_once_,
                 &protobuf_AddDesc_MetaData_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MetaData_2eproto {
  StaticDescriptorInitializer_MetaData_2eproto() {
    protobuf_AddDesc_MetaData_2eproto();
  }
} static_descriptor_initializer_MetaData_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Label::kPosFieldNumber;
const int Label::kLabelFieldNumber;
#endif  // !_MSC_VER

Label::Label()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Label::InitAsDefaultInstance() {
}

Label::Label(const Label& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Label::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Label::~Label() {
  SharedDtor();
}

void Label::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Label& Label::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MetaData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MetaData_2eproto();
#endif
  return *default_instance_;
}

Label* Label::default_instance_ = NULL;

Label* Label::New() const {
  return new Label;
}

void Label::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // required string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // required string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }

}

int Label::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Label::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Label*>(&from));
}

void Label::MergeFrom(const Label& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
}

void Label::CopyFrom(const Label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Label::Swap(Label* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Label::GetTypeName() const {
  return "PFAData.Label";
}


// ===================================================================

#ifndef _MSC_VER
const int Score::kScoreFieldNumber;
const int Score::kMultFieldNumber;
const int Score::kMissedFieldNumber;
const int Score::kIncorrectFieldNumber;
const int Score::kOkFieldNumber;
const int Score::kGoodFieldNumber;
const int Score::kGreatFieldNumber;
const int Score::kCurStreakFieldNumber;
const int Score::kGoodStreakFieldNumber;
const int Score::kBadStreakFieldNumber;
const int Score::kDateFieldNumber;
#endif  // !_MSC_VER

Score::Score()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Score::InitAsDefaultInstance() {
}

Score::Score(const Score& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Score::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  mult_ = 10;
  missed_ = 0;
  incorrect_ = 0;
  ok_ = 0;
  good_ = 0;
  great_ = 0;
  curstreak_ = 0;
  goodstreak_ = 0;
  badstreak_ = 0;
  date_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Score::~Score() {
  SharedDtor();
}

void Score::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Score& Score::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MetaData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MetaData_2eproto();
#endif
  return *default_instance_;
}

Score* Score::default_instance_ = NULL;

Score* Score::New() const {
  return new Score;
}

void Score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0;
    mult_ = 10;
    missed_ = 0;
    incorrect_ = 0;
    ok_ = 0;
    good_ = 0;
    great_ = 0;
    curstreak_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    goodstreak_ = 0;
    badstreak_ = 0;
    date_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mult;
        break;
      }

      // optional int32 mult = 2 [default = 10];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mult_)));
          set_has_mult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_missed;
        break;
      }

      // optional int32 missed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missed_)));
          set_has_missed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_incorrect;
        break;
      }

      // optional int32 incorrect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incorrect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &incorrect_)));
          set_has_incorrect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ok;
        break;
      }

      // optional int32 ok = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ok_)));
          set_has_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_good;
        break;
      }

      // optional int32 good = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_good:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &good_)));
          set_has_good();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_great;
        break;
      }

      // optional int32 great = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_great:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &great_)));
          set_has_great();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_curStreak;
        break;
      }

      // optional sint32 curStreak = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curStreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &curstreak_)));
          set_has_curstreak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_goodStreak;
        break;
      }

      // optional int32 goodStreak = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodStreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodstreak_)));
          set_has_goodstreak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_badStreak;
        break;
      }

      // optional int32 badStreak = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badStreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badstreak_)));
          set_has_badstreak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_date;
        break;
      }

      // optional int32 date = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->score(), output);
  }

  // optional int32 mult = 2 [default = 10];
  if (has_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mult(), output);
  }

  // optional int32 missed = 3;
  if (has_missed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->missed(), output);
  }

  // optional int32 incorrect = 4;
  if (has_incorrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->incorrect(), output);
  }

  // optional int32 ok = 5;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ok(), output);
  }

  // optional int32 good = 6;
  if (has_good()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->good(), output);
  }

  // optional int32 great = 7;
  if (has_great()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->great(), output);
  }

  // optional sint32 curStreak = 8;
  if (has_curstreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->curstreak(), output);
  }

  // optional int32 goodStreak = 9;
  if (has_goodstreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->goodstreak(), output);
  }

  // optional int32 badStreak = 10;
  if (has_badstreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->badstreak(), output);
  }

  // optional int32 date = 11;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->date(), output);
  }

}

int Score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->score());
    }

    // optional int32 mult = 2 [default = 10];
    if (has_mult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mult());
    }

    // optional int32 missed = 3;
    if (has_missed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missed());
    }

    // optional int32 incorrect = 4;
    if (has_incorrect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->incorrect());
    }

    // optional int32 ok = 5;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ok());
    }

    // optional int32 good = 6;
    if (has_good()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->good());
    }

    // optional int32 great = 7;
    if (has_great()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->great());
    }

    // optional sint32 curStreak = 8;
    if (has_curstreak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->curstreak());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 goodStreak = 9;
    if (has_goodstreak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodstreak());
    }

    // optional int32 badStreak = 10;
    if (has_badstreak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badstreak());
    }

    // optional int32 date = 11;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Score::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Score*>(&from));
}

void Score::MergeFrom(const Score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_mult()) {
      set_mult(from.mult());
    }
    if (from.has_missed()) {
      set_missed(from.missed());
    }
    if (from.has_incorrect()) {
      set_incorrect(from.incorrect());
    }
    if (from.has_ok()) {
      set_ok(from.ok());
    }
    if (from.has_good()) {
      set_good(from.good());
    }
    if (from.has_great()) {
      set_great(from.great());
    }
    if (from.has_curstreak()) {
      set_curstreak(from.curstreak());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_goodstreak()) {
      set_goodstreak(from.goodstreak());
    }
    if (from.has_badstreak()) {
      set_badstreak(from.badstreak());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
}

void Score::CopyFrom(const Score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Score::Swap(Score* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(mult_, other->mult_);
    std::swap(missed_, other->missed_);
    std::swap(incorrect_, other->incorrect_);
    std::swap(ok_, other->ok_);
    std::swap(good_, other->good_);
    std::swap(great_, other->great_);
    std::swap(curstreak_, other->curstreak_);
    std::swap(goodstreak_, other->goodstreak_);
    std::swap(badstreak_, other->badstreak_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Score::GetTypeName() const {
  return "PFAData.Score";
}


// ===================================================================

#ifndef _MSC_VER
const int SongInfo::kMd5FieldNumber;
const int SongInfo::kDivisionFieldNumber;
//const int SongInfo::kNotesFieldNumber;
//const int SongInfo::kBeatsFieldNumber;
//const int SongInfo::kSecondsFieldNumber;
//const int SongInfo::kTracksFieldNumber;
//const int SongInfo::kPlaysFieldNumber;
#endif  // !_MSC_VER

SongInfo::SongInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SongInfo::InitAsDefaultInstance() {
}

SongInfo::SongInfo(const SongInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SongInfo::SharedCtor() {
  //_cached_size_ = 0;
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  division_ = 0;
  //notes_ = 0;
  //beats_ = 0;
  //seconds_ = 0;
  //tracks_ = 0;
  //plays_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SongInfo::~SongInfo() {
  SharedDtor();
}

void SongInfo::SharedDtor() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SongInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SongInfo& SongInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MetaData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MetaData_2eproto();
#endif
  return *default_instance_;
}

SongInfo* SongInfo::default_instance_ = NULL;

SongInfo* SongInfo::New() const {
  return new SongInfo;
}

void SongInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
    division_ = 0;
    //notes_ = 0;
    beats_ = 0;
    seconds_ = 0;
    tracks_ = 0;
    plays_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SongInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes md5 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_md5()));
        } else {
          goto handle_uninterpreted;
        }
        //if (input->ExpectTag(16)) goto parse_division;
        break;
      }

      // optional int32 tracks = 6;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tracks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tracks_)));
          set_has_tracks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_plays;
        break;
      }

      // optional int32 plays = 7;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plays_)));
          set_has_plays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SongInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes md5 = 1;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->md5(), output);
  }

  // optional int32 division = 2;
  if (has_division()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->division(), output);
  }

  // optional int32 notes = 3;
  if (has_notes()) {
    //::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->notes(), output);
  }

  // optional int32 beats = 4;
  if (has_beats()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->beats(), output);
  }

  // optional int32 seconds = 5;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seconds(), output);
  }

  // optional int32 tracks = 6;
  if (has_tracks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tracks(), output);
  }

  // optional int32 plays = 7;
  if (has_plays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->plays(), output);
  }

}

int SongInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes md5 = 1;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->md5());
    }

    // optional int32 division = 2;
    if (has_division()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->division());
    }

    // optional int32 beats = 4;
    if (has_beats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beats());
    }

    // optional int32 seconds = 5;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

    // optional int32 tracks = 6;
    if (has_tracks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tracks());
    }

    // optional int32 plays = 7;
    if (has_plays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plays());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SongInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SongInfo*>(&from));
}

void SongInfo::MergeFrom(const SongInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_division()) {
      set_division(from.division());
    }
    /*if (from.has_notes()) {
      set_notes(0);
    }*/
    if (from.has_beats()) {
      set_beats(from.beats());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_tracks()) {
      set_tracks(from.tracks());
    }
    if (from.has_plays()) {
      set_plays(from.plays());
    }
  }
}

void SongInfo::CopyFrom(const SongInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SongInfo::Swap(SongInfo* other) {
  if (other != this) {
    std::swap(md5_, other->md5_);
    std::swap(division_, other->division_);
    //std::swap(notes_, other->notes_);
    std::swap(beats_, other->beats_);
    std::swap(seconds_, other->seconds_);
    std::swap(tracks_, other->tracks_);
    std::swap(plays_, other->plays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SongInfo::GetTypeName() const {
  return "PFAData.SongInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int FileInfo::kInfoFieldNumber;
const int FileInfo::kLabelFieldNumber;
const int FileInfo::kTop10FieldNumber;
#endif  // !_MSC_VER

FileInfo::FileInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FileInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::PFAData::SongInfo*>(
      ::PFAData::SongInfo::internal_default_instance());
#else
  info_ = const_cast< ::PFAData::SongInfo*>(&::PFAData::SongInfo::default_instance());
#endif
}

FileInfo::FileInfo(const FileInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FileInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileInfo::~FileInfo() {
  SharedDtor();
}

void FileInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void FileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileInfo& FileInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MetaData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MetaData_2eproto();
#endif
  return *default_instance_;
}

FileInfo* FileInfo::default_instance_ = NULL;

FileInfo* FileInfo::New() const {
  return new FileInfo;
}

void FileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PFAData::SongInfo::Clear();
    }
  }
  label_.Clear();
  top10_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PFAData.SongInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // repeated .PFAData.Label label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        if (input->ExpectTag(26)) goto parse_top10;
        break;
      }

      // repeated .PFAData.Score top10 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_top10:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_top10()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_top10;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PFAData.SongInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info(), output);
  }

  // repeated .PFAData.Label label = 2;
  for (int i = 0; i < this->label_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->label(i), output);
  }

  // repeated .PFAData.Score top10 = 3;
  for (int i = 0; i < this->top10_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->top10(i), output);
  }

}

int FileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PFAData.SongInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .PFAData.Label label = 2;
  total_size += 1 * this->label_size();
  for (int i = 0; i < this->label_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->label(i));
  }

  // repeated .PFAData.Score top10 = 3;
  total_size += 1 * this->top10_size();
  for (int i = 0; i < this->top10_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->top10(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileInfo*>(&from));
}

void FileInfo::MergeFrom(const FileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_.MergeFrom(from.label_);
  top10_.MergeFrom(from.top10_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PFAData::SongInfo::MergeFrom(from.info());
    }
  }
}

void FileInfo::CopyFrom(const FileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  for (int i = 0; i < label_size(); i++) {
    if (!this->label(i).IsInitialized()) return false;
  }
  for (int i = 0; i < top10_size(); i++) {
    if (!this->top10(i).IsInitialized()) return false;
  }
  return true;
}

void FileInfo::Swap(FileInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    label_.Swap(&other->label_);
    top10_.Swap(&other->top10_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FileInfo::GetTypeName() const {
  return "PFAData.FileInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int File::kFileNameFieldNumber;
const int File::kFileSizeFieldNumber;
const int File::kInfoPosFieldNumber;
#endif  // !_MSC_VER

File::File()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void File::InitAsDefaultInstance() {
}

File::File(const File& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void File::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filesize_ = 0;
  infopos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

File::~File() {
  SharedDtor();
}

void File::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const File& File::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MetaData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MetaData_2eproto();
#endif
  return *default_instance_;
}

File* File::default_instance_ = NULL;

File* File::New() const {
  return new File;
}

void File::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    filesize_ = 0;
    infopos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fileSize;
        break;
      }

      // required int32 fileSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_infoPos;
        break;
      }

      // required int32 infoPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_infoPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infopos_)));
          set_has_infopos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // required int32 fileSize = 2;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->filesize(), output);
  }

  // required int32 infoPos = 3;
  if (has_infopos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->infopos(), output);
  }

}

int File::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required int32 fileSize = 2;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filesize());
    }

    // required int32 infoPos = 3;
    if (has_infopos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->infopos());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const File*>(&from));
}

void File::MergeFrom(const File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_infopos()) {
      set_infopos(from.infopos());
    }
  }
}

void File::CopyFrom(const File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void File::Swap(File* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(filesize_, other->filesize_);
    std::swap(infopos_, other->infopos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string File::GetTypeName() const {
  return "PFAData.File";
}


// ===================================================================

#ifndef _MSC_VER
const int MetaData::kFileFieldNumber;
const int MetaData::kFileInfoFieldNumber;
#endif  // !_MSC_VER

MetaData::MetaData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MetaData::InitAsDefaultInstance() {
}

MetaData::MetaData(const MetaData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MetaData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaData::~MetaData() {
  SharedDtor();
}

void MetaData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MetaData& MetaData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MetaData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MetaData_2eproto();
#endif
  return *default_instance_;
}

MetaData* MetaData::default_instance_ = NULL;

MetaData* MetaData::New() const {
  return new MetaData;
}

void MetaData::Clear() {
  file_.Clear();
  fileinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PFAData.File file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_file;
        if (input->ExpectTag(18)) goto parse_fileInfo;
        break;
      }

      // repeated .PFAData.FileInfo fileInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fileinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fileInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PFAData.File file = 1;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->file(i), output);
  }

  // repeated .PFAData.FileInfo fileInfo = 2;
  for (int i = 0; i < this->fileinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->fileinfo(i), output);
  }

}

int MetaData::ByteSize() const {
  int total_size = 0;

  // repeated .PFAData.File file = 1;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }

  // repeated .PFAData.FileInfo fileInfo = 2;
  total_size += 1 * this->fileinfo_size();
  for (int i = 0; i < this->fileinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fileinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MetaData*>(&from));
}

void MetaData::MergeFrom(const MetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_.MergeFrom(from.file_);
  fileinfo_.MergeFrom(from.fileinfo_);
}

void MetaData::CopyFrom(const MetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {

  for (int i = 0; i < file_size(); i++) {
    if (!this->file(i).IsInitialized()) return false;
  }
  for (int i = 0; i < fileinfo_size(); i++) {
    if (!this->fileinfo(i).IsInitialized()) return false;
  }
  return true;
}

void MetaData::Swap(MetaData* other) {
  if (other != this) {
    file_.Swap(&other->file_);
    fileinfo_.Swap(&other->fileinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MetaData::GetTypeName() const {
  return "PFAData.MetaData";
}


// ===================================================================

#ifndef _MSC_VER
const int Registration::kDisplaynameFieldNumber;
const int Registration::kNameFieldNumber;
const int Registration::kKeyFieldNumber;
const int Registration::kDateFieldNumber;
#endif  // !_MSC_VER

Registration::Registration()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Registration::InitAsDefaultInstance() {
}

Registration::Registration(const Registration& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Registration::SharedCtor() {
  _cached_size_ = 0;
  displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Registration::~Registration() {
  SharedDtor();
}

void Registration::SharedDtor() {
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Registration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Registration& Registration::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MetaData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MetaData_2eproto();
#endif
  return *default_instance_;
}

Registration* Registration::default_instance_ = NULL;

Registration* Registration::New() const {
  return new Registration;
}

void Registration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_displayname()) {
      if (displayname_ != &::google::protobuf::internal::kEmptyString) {
        displayname_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    date_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Registration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string displayname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_date;
        break;
      }

      // optional int32 date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Registration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string displayname = 1;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->displayname(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(), output);
  }

  // optional int32 date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->date(), output);
  }

}

int Registration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string displayname = 1;
    if (has_displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional int32 date = 4;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Registration::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Registration*>(&from));
}

void Registration::MergeFrom(const Registration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
}

void Registration::CopyFrom(const Registration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Registration::IsInitialized() const {

  return true;
}

void Registration::Swap(Registration* other) {
  if (other != this) {
    std::swap(displayname_, other->displayname_);
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Registration::GetTypeName() const {
  return "PFAData.Registration";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PFAData

// @@protoc_insertion_point(global_scope)
